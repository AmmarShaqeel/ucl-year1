#include <stdio.h>
#include <stdlib.h>
#include<string.h>

// structure for student details
struct student_details
	{
		char student_name[100];
		int student_number;
		struct student_details *next;
	};


void newStudent();

int main(void)
{
	int what_do;
	int exit = 0;
	struct student_details *root = NULL;	

	// continous while loop that runs until user exits (dependent on exit flag).
	while(exit == 0)
	{
		fpurge(stdin); //purge input in case user tried to input invalid characters, e.g. arrow key up in cmd
		what_do = 0;   // reset what_do (again in case user input invalid characters)
		printf("Type your option:\n1: Introduce new student\n2: Remove student\n3: Print student report\n4: Print report for all students\n5: Save to file\n6: Retrieve data from file\n7: Exit\n");
		scanf("%d",&what_do);
		
		// switch for each of the options + default switch in case invalid characters are inputted
		switch(what_do)
		{
			case 1:
			newStudent(&root);
			printf("%s", root->next);
			break;
			
			case 2:
			break;

			case 3:
			break;

			case 4:
			break;

			case 5:
			break;

			case 6:
			break;
			
			case 7:
			exit = 1;
			break;
		
			default:
			printf("Input not recognised\n\n");
			break;	
		}
	}
	return 0;
}




void newStudent(struct student_details **root)
{
	int i;
	int student_number;
	char student_name[100];
	struct student_details *current;
	struct student_details *new;

	fpurge(stdin); 
	printf("Please input the new student's name\n");
	scanf("%s",&student_name);
	printf("Please input the new student's number\n");
	fpurge(stdin);
	scanf("%d",&student_number);

	if(!*root)
	{
	current = malloc(sizeof(struct student_details));
	strcpy(student_name, current->student_name);
	current->student_number = student_number;
	current->next = NULL;
	printf("%s", current->next);
	*root = current;
	}

	else	
	{
		printf("we here");
		new = malloc(sizeof(struct student_details));
		strcpy(student_name, new->student_name);
		new->student_number = student_number;

		while(strcmp(current->next->student_name,student_name) < 0 || current->next != NULL)
		{
			current = current->next;
		}

		new->next = current->next;
		current->next = new;
			
		printf("%d", current->student_number);
		printf(" %d", new->student_number);
	}
}
